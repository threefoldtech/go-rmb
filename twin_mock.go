// Code generated by MockGen. DO NOT EDIT.
// Source: twin.go

// Package rmb is a generated GoMock package.
package rmb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTwinResolver is a mock of TwinResolver interface.
type MockTwinResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTwinResolverMockRecorder
}

// MockTwinResolverMockRecorder is the mock recorder for MockTwinResolver.
type MockTwinResolverMockRecorder struct {
	mock *MockTwinResolver
}

// NewMockTwinResolver creates a new mock instance.
func NewMockTwinResolver(ctrl *gomock.Controller) *MockTwinResolver {
	mock := &MockTwinResolver{ctrl: ctrl}
	mock.recorder = &MockTwinResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwinResolver) EXPECT() *MockTwinResolverMockRecorder {
	return m.recorder
}

// PublicKey mocks base method.
func (m *MockTwinResolver) PublicKey(twin int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey", twin)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockTwinResolverMockRecorder) PublicKey(twin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockTwinResolver)(nil).PublicKey), twin)
}

// Resolve mocks base method.
func (m *MockTwinResolver) Resolve(twin int) (TwinClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", twin)
	ret0, _ := ret[0].(TwinClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockTwinResolverMockRecorder) Resolve(twin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockTwinResolver)(nil).Resolve), twin)
}

// MockTwinClient is a mock of TwinClient interface.
type MockTwinClient struct {
	ctrl     *gomock.Controller
	recorder *MockTwinClientMockRecorder
}

// MockTwinClientMockRecorder is the mock recorder for MockTwinClient.
type MockTwinClientMockRecorder struct {
	mock *MockTwinClient
}

// NewMockTwinClient creates a new mock instance.
func NewMockTwinClient(ctrl *gomock.Controller) *MockTwinClient {
	mock := &MockTwinClient{ctrl: ctrl}
	mock.recorder = &MockTwinClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwinClient) EXPECT() *MockTwinClientMockRecorder {
	return m.recorder
}

// SendRemote mocks base method.
func (m *MockTwinClient) SendRemote(msg Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRemote", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRemote indicates an expected call of SendRemote.
func (mr *MockTwinClientMockRecorder) SendRemote(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRemote", reflect.TypeOf((*MockTwinClient)(nil).SendRemote), msg)
}

// SendReply mocks base method.
func (m *MockTwinClient) SendReply(msg Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReply", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReply indicates an expected call of SendReply.
func (mr *MockTwinClientMockRecorder) SendReply(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReply", reflect.TypeOf((*MockTwinClient)(nil).SendReply), msg)
}
